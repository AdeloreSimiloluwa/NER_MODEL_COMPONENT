name: Train spacy
inputs:
- {name: TRAIN_DATA}
- {name: OUTPUT_PATH, default: /content/custom_ner_model, optional: true}
- {name: iterations, default: '2', optional: true}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'spacy==2.0.18' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'spacy==2.0.18' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def train_spacy(TRAIN_DATA, OUTPUT_PATH = '/content/custom_ner_model', iterations\
      \ = 2) :\n\n    #Converting JSON1 file to Spacy tuples format\n    import json\n\
      \    import numpy as np\n    import plac\n    import random\n    import warnings\n\
      \    from pathlib import Path\n    import spacy\n    import logging\n    from\
      \ spacy.util import minibatch, compounding\n    from spacy.gold import GoldParse\n\
      \    from spacy.scorer import Scorer\n    from kfp.components import create_component_from_func\n\
      \n    TRAIN_DATA = TRAIN_DATA\n    nlp = spacy.blank('en') \n    if 'ner' not\
      \ in nlp.pipe_names:\n        ner = nlp.create_pipe('ner')\n        nlp.add_pipe(ner,\
      \ last=True)\n\n    for _, annotations in TRAIN_DATA:\n         for ent in annotations.get('entities'):\n\
      \            ner.add_label(ent[2])\n\n    other_pipes = [pipe for pipe in nlp.pipe_names\
      \ if pipe != 'ner']\n    with nlp.disable_pipes(*other_pipes): \n        optimizer\
      \ = nlp.begin_training()\n        for itn in range(iterations):\n          \
      \  print(\"Starting iteration \" + str(itn))\n            random.shuffle(TRAIN_DATA)\n\
      \            losses = {}\n            for text, annotations in TRAIN_DATA:\n\
      \                try:\n                    nlp.update(\n                   \
      \     [text],  \n                        [annotations],  \n                \
      \        drop=0.2,  \n                        sgd=optimizer,  \n           \
      \             losses=losses)\n                except Exception as error:\n \
      \                   print(error)\n                    continue\n           \
      \ print(losses)\n    nlp.to_disk(OUTPUT_PATH)\n    return nlp\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='Train spacy', description='')\n_parser.add_argument(\"\
      --TRAIN-DATA\", dest=\"TRAIN_DATA\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--OUTPUT-PATH\", dest=\"OUTPUT_PATH\", type=str, required=False,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--iterations\", dest=\"\
      iterations\", type=str, required=False, default=argparse.SUPPRESS)\n_parsed_args\
      \ = vars(_parser.parse_args())\n\n_outputs = train_spacy(**_parsed_args)\n"
    args:
    - --TRAIN-DATA
    - {inputValue: TRAIN_DATA}
    - if:
        cond: {isPresent: OUTPUT_PATH}
        then:
        - --OUTPUT-PATH
        - {inputValue: OUTPUT_PATH}
    - if:
        cond: {isPresent: iterations}
        then:
        - --iterations
        - {inputValue: iterations}
